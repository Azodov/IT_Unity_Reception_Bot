from aiogram import types
from aiogram.types import ReplyKeyboardRemove
from data.config import CHANNELS
from keyboards.default.courses import courseListRu
from keyboards.default.fullInfo import familyInfoRu, socialmediaRu
from keyboards.default.language import language
from keyboards.default.sendContact import contactRu
from keyboards.default.time import timeList
from keyboards.inline.sendAdmin import senderMenuRu
from states.langState import langRu
from states.fullInfo import familyRu
from aiogram.dispatcher import FSMContext

from loader import dp, db


@dp.message_handler(text_contains="üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫")
async def start_info(message: types.Message, state: FSMContext):
    await state.update_data(
        {"username": message.from_user.username}
    )
    await state.update_data(
        {"user_id": message.from_user.id}
    )
    lang = message.text
    await state.update_data(
        {"lang": lang}
    )
    await message.answer("‚úí–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è?", reply_markup=ReplyKeyboardRemove())
    await langRu.fullname.set()


@dp.message_handler(state=langRu.fullname)
async def answer_fullname(message: types.Message, state: FSMContext):
    fullname = message.text

    if len(fullname) < 5 or len(fullname) > 25:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é")
    else:
        await state.update_data(
            {"name": fullname}
        )
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=contactRu)
        await langRu.phoneNumber.set()


@dp.message_handler(state=langRu.phoneNumber, content_types=['contact', 'text'])
async def answer_number(message: types.Message, state: FSMContext):
    try:
        if message.content_type == 'contact':
            contact = message.contact
            await state.update_data(
                {"phoneNumber": contact.phone_number}
            )
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç", reply_markup=ReplyKeyboardRemove())
            await langRu.next()
        else:
            contact = str(message.text)
            if len(contact) == 13 or len(contact) == 12 or len(contact) == 9:
                await state.update_data(
                    {"phoneNumber": contact}
                )
                await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç", reply_markup=ReplyKeyboardRemove())
                await langRu.next()
            else:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º—É +998901234567")
    except Exception:
        await message.answer(f"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start ")
        await state.finish()
        await state.reset_data()


@dp.message_handler(state=langRu.age)
async def answer_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
        if age<10 or age>70:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ.\n"
                                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑")
        else:
            await state.update_data(
                {"age": age}
            )
            await message.answer("–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ", reply_markup=familyInfoRu)
            await familyRu.family.set()
    except:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏")

@dp.message_handler(state=familyRu.family)
async def answer_familyinfo(message: types.Message, state: FSMContext):
    familyinfo = message.text
    await state.update_data(
        {"family_info": familyinfo}
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å", reply_markup=courseListRu)
    await familyRu.course.set()


@dp.message_handler(state=familyRu.course)
async def answer_cource(message: types.Message, state: FSMContext):
    course = message.text
    bio = db.course_detail_ru(course)[0]
    await state.update_data(
        {"course": course}
    )
    await message.answer(bio + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–∞—Å", reply_markup=timeList)
    await familyRu.time.set()


@dp.message_handler(state=familyRu.time)
async def time_select(message: types.Message, state: FSMContext):
    time = message.text
    await state.update_data(
        {"time": time}
    )
    await message.answer("–ö–∞–∫ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å ?", reply_markup=socialmediaRu)
    await familyRu.socialmedia.set()


@dp.message_handler(state=familyRu.socialmedia)
async def answer_feddback(message: types.Message, state: FSMContext):
    feed = message.text
    await state.update_data(
        {"socialmedia": feed}
    )
    data = await state.get_data()
    name = data.get("name")
    phoneNumber = data.get("phoneNumber")
    course = data.get("course")
    time = data.get("time")
    socialmedia = data.get("socialmedia")
    familyInfo = data.get("family_info")
    age = data.get("age")
    await message.answer("–î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ", reply_markup=ReplyKeyboardRemove())
    await message.answer(f"‚úí –ò–º—è: {name}\n"
                         f"üìû –¢–µ–ª: {phoneNumber}\n"
                         f"üî∂ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
                         f"üïî –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: {time}\n"
                         f"üí¨ –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {familyInfo}\n"
                         f"üìö –í–∞—à –∫—É—Ä—Å: {course}\n"
                         f"üåê –Ø –ø–æ–ª—É—á–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω—Ç—Ä–µ –æ—Ç {socialmedia}.\n\n\n"
                         f"üì° –ê–¥–º–∏–Ω: @Developer_6797\n\n", reply_markup=senderMenuRu)


@dp.callback_query_handler(state=familyRu.socialmedia, text="send")
async def accept(call: types.CallbackQuery, state: FSMContext):

    data = await state.get_data()
    name = data.get("name")
    phoneNumber = data.get("phoneNumber")
    course = data.get("course")
    username = data.get("username")
    time = data.get("time")
    socialmedia = data.get("socialmedia")
    familyInfo = data.get("family_info")
    user_id = data.get("user_id")
    age = data.get("age")
    lang = data.get("lang")
    db.add_user(user_id, phoneNumber, username, name, course, lang, age, familyInfo) # bazaga malumotlarni jo'natadi
    msg = str(f"‚úí F.I.O: {name}\n"
               f"üìû Tel: {phoneNumber}\n"
               f"üî∂ Yoshim: {age}\n"
               f"üïî Qulay vaqtim: {time}\n"
               f"üí¨ Oilaviy holatim: {familyInfo}\n"
               f"üó£ Tanlagan tilim: {lang}\n"
               f"üìö Tanlagan kursim: {course}\n"
               f"üåê Men markaz haqida {socialmedia}dan habar topdim.\n\n\n"
               f"üì° Admin: @Developer_6797\n\n")

    message = await call.message.answer(msg)
    await message.send_copy(chat_id=CHANNELS[0])


    await call.answer(cache_time=60)
    await call.message.answer(f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å\n"
                              "–º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", reply_markup=ReplyKeyboardRemove())
    await state.finish()
    await state.reset_data()


@dp.callback_query_handler(state=familyRu.socialmedia, text="cancel")
async def cancel(call: types.CallbackQuery, state: FSMContext):
    message = await call.message.edit_reply_markup()
    await call.answer(cache_time=60)
    await message.delete()
    await state.finish()
    await state.reset_data()
    await call.message.answer('–í—ã —Å–Ω–æ–≤–∞ –≤ –º–µ–Ω—é', reply_markup=language)
